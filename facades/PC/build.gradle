// The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config, etc
apply from: "$rootDir/config/artifactory.gradle"

import org.apache.tools.ant.filters.FixCrLfFilter
import java.text.SimpleDateFormat;
import groovy.json.JsonBuilder

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

ext {
    // General props
    mainClassName = 'org.continuum.engine.Continuum'
    subDirLibs = 'libs'
    templatesDir = new File(rootDir, 'templates')
    rootDirDist = new File(rootDir, 'build/distributions')

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    // Version related
    startDateTimeString = dateTimeFormat.format(new Date())
    versionFileName = 'VERSION'
    versionBase = new File(templatesDir, "version.txt").text.trim()
    displayVersion = versionBase
}

// Base the engine tests on the same version number as the engine
version = project(':engine').version
println "PC VERSION: $version"

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.continuum.facades'

dependencies {
    compile project(':engine')
}

// Instructions for packaging a jar file for the PC facade
jar {
    manifest {
        //TODO: Maybe later add the engine's version number into here?
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(" ")
        attributes("Main-Class": mainClassName)
        attributes("Class-Path": manifestClasspath)
        attributes("Implementation-Title": "Terasology-" + project.name)
        attributes("Implementation-Version": env.BUILD_NUMBER + ", " + env.GIT_BRANCH + ", " + env.BUILD_ID)
    }
}

configurations {
    // for fetching modules for running a server
    modules {
        transitive = false
    }
}

task game(type: JavaExec) {
    description = "Run 'Continuum' to play the game as a standard PC application"

    // Dependencies: natives + all modules & the PC facade itself (which will trigger the engine)
    dependsOn rootProject.extractNatives
    dependsOn rootProject.moduleClasses
    dependsOn classes

    // Run arguments
    main = mainClassName
    workingDir = rootDir
    String[] runArgs = ["-homedir"]
    args runArgs

    // Classpath: PC itself, engine classes, engine dependencies. Not modules or natives since the engine finds those
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.output.resourcesDir
    classpath project(':engine').sourceSets.main.output.classesDir
    classpath project(':engine').configurations.runtime
}
