// Separate build file for structure heavy stuff like using Git to fetch other repos to embed within the project
apply from: 'config/ide.gradle'

// Needed for extending the "clean" task
apply plugin: 'base'

// For generating IntelliJ project files
apply plugin: 'idea'

apply plugin: 'java'

sourceCompatibility = 1.5
version = '1.0'

buildscript {
    repositories {
        // External libs - jcenter is like a super set of the Maven Central
        jcenter()
        mavenCentral()
    }

    dependencies {
        // Artifactory plugin
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.0.0')

        // Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}

// Test for right version of Java in use for running this script
assert org.gradle.api.JavaVersion.current().isJava8Compatible()

ext {
    dirNatives = 'natives'
    templatesDir = 'templates'

    // Lib dir for use in manifest entries etc
    subDirLibs = 'libs'

    LwjglVersion = '2.9.3'
}

repositories {
    // External libs - jcenter is like a super set of the Maven Central
    jcenter()
    mavenCentral()
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Natives - Handles pulling in and extracting native libraries for LWJGL
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Define configurations for native an config
configurations {
    natives
}

dependencies {
    // For the "natives" configuration make it depend on the native files from LWJGL
    natives group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: LwjglVersion

    // jUnit
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task extractWindowsNatives(type: Sync) {
    description = "Extract the Windows natives from the downloaded zip"
    from {
        configurations.natives.collect { it.getName().contains('-natives-window') ? zipTree(it) : [] }
    }
    into("$dirNatives/windows")
    exclude('META-INF/**')
}

task extractMacOSNatives(type: Sync) {
    description = "Extracts the macOS natives from the downloaded zip"
    from {
        configurations.natives.collect { it.getName().contains('-natives-osx') ? zipTree(it) : [] }
    }
    into("$dirNatives/macosx")
    exclude('META-INF/**')
}

task extractLinuxNatives(type: Sync) {
    description = "Extracts the Linux natives from the downloaded zip"

    description = "Extracts the Linux natives from the downloaded zip"
    from {
        configurations.natives.collect { it.getName().contains('-natives-linux') ? zipTree(it) : [] }
    }
    into("$dirNatives/linux")
    exclude('META-INF/**')
}

task extractNatives {
    description = "Extracts all the natives lwjgl libraries from the downloaded zip"
    dependsOn extractLinuxNatives
    dependsOn extractMacOSNatives
    dependsOn extractWindowsNatives
}

// Include deletion of extracted natives in the global clean taks
clean.doLast {
    new File(dirNatives).deleteDir()
    println "Cleaned root - don't forget to re-extract stuff! 'gradlew extractNatives' will do so, or 'gradlew idea'"
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper tasks
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Helpers that do magic things after having dependencies attached below
task moduleClasses
task moduleJars

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General IDE customization
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task copyInMissingTemplates {
    description = "Copies in plaeholders from the /templates dir to project root if not present yet"
    File gradlePropsFile = new File(rootDir, 'gradle.properties')
    File overrideCfgFile = new File(rootDir, 'override.cfg')

    if (!gradlePropsFile.exists()) {
        new File(rootDir, 'gradle.properties') << new File(templatesDir, 'gradle.properties').text
    }

    if (!overrideCfgFile.exists()) {
        new File(rootDir, 'override.cfg') << new File(templatesDir, 'override.cfg').text
    }
}

// Make sure the IDE prep includes extraction of natives
ideaModule.dependsOn extractNatives
ideaModule.dependsOn copyInMissingTemplates

// For IntelliJ add a bunch of excluded directories
idea {
    // Exclude native dirs
    module.excludeDirs += file('natives')

    // Exclude output dirs
    module.excludeDirs += file('logs')
    module.excludeDirs += file('saves')

    // make download the source code from the dependent JARs
    module.downloadSources = true

    project {
        // Set JDK
        jdkName = "1.8"
        wildcards -= '!?*.groovy'

        ipr {
            withXml { xmlProvider ->
                // Apply a bunch of tweaks to IntelliJ config - all defined in ide.gradle
                // Part reason for separate file was in case a module needs to define something it cannot do so in a
                // project block
                def iprNode = xmlProvider.asNode()
                ideaActivateCheckstyle(iprNode)
                ideaActivateCopyright(iprNode)
                ideaActivateGit(iprNode)
                ideaActivateGradle(iprNode)
            }

            // Sets sourceCompatibility with IntelliJ
            whenMerged { project ->
                project.jdk.languageLevel = 'JDK_1_8'
            }
        }
    }

    // Tweaks to the .iws
    workspace.iws.withXml { xmlProvider ->
        def iwsNode = xmlProvider.asNode()
        ideaMakeAutomatically(iwsNode)
        ideaRunConfig(iwsNode)
    }
}

// Ensure that the iws file is removed
cleanIdea.doLast {
    new File('Continuum.iws').delete()
}
