// The engine build is the primary Java project and has the primary list of dependencies

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config, etc
apply from: "$rootDir/config/artifactory.gradle"

import groovy.json.JsonSlurper

import java.text.SimpleDateFormat;

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    templatesDir = new File(rootDir, 'templates')

    // Stuff for our automatic version file setup
    startDateTimeString = dateTimeFormat.format(new Date())
    versionInfoFileDir = new File(buildDir, 'classes/org/continuum/version')
    versionInfoFile = new File(versionInfoFileDir, 'versionInfo.properties')
    versionFileName = 'VERSION'
    versionBase = new File(templatesDir, "version.txt").text.trim()
    displayVersion = versionBase
}

def convertGitBranch = { gitBranch ->
    if (gitBranch != null) {
        // Remove "origin/" from "origin/develop"
        gitBranch.substring(gitBranch.lastIndexOf("/") + 1)
    } else {
        ""
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JAVA Section
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Engine for now has one source sets
sourceSets {
    // Main is almost everything - the true engine
    main {
        java {
            output.classesDir 'build/classes'
        }

        // This makes the resources (assets, 3d wizardry includes, etc) also go to build/classes
        output.resourcesDir 'build/classes'
    }
}

// Customizations for the main compilation configuration
configurations {
    // Exclude a couple JWJGL modules that aren't needed during compilation (OS specific stuff in these two perhaps)
    compile {
        exclude module: 'lwjgl-platform'
        exclude module: 'jinput-platform'
    }

    // Beyond the standard compile "configuration" we declare one called "devCompile" specific to the "dev" source set
    devCompile.extendsFrom compile
}

// Primary dependencies definition
dependencies {
    // Math
    compile group: 'com.google.guava', name: 'guava', version: '19.0'

    // Graphics, 3D, UI, etc.
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: LwjglVersion
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: LwjglVersion

    // Other libs
    compile group: 'javolution', name: 'javolution', version: '5.5.1'

    // Wildcard dependency to catch any libs provided with the project (remote repo preferred instead)
    compile fileTree(dir: 'libs', include: '*.jar')
}

// Instructions for packaging a jar file for the engine
jar {
    // Unlike the content modules Gradle grabs the assets as they're in a resources directory. Need to avoid dupes tho
    duplicatesStrategy = 'exclude'

    manifest {
        def manifestClasspath = "$subDirLibs/" + configurations.runtime.collect { it.getName() }.join(" $subDirLibs/")
        attributes("Class-Path": manifestClasspath, "Implementation-Title": "Terasology-" + project.name, "Implementation-Version": env.BUILD_NUMBER + ", " + convertGitBranch(env.GIT_BRANCH) + ", " + env.BUILD_ID + ", " + displayVersion)
    }
}
